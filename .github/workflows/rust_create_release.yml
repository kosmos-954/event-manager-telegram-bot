name: Rust build and create Release

on:
  pull_request_target:
    branched:
      - "main"
    paths:
      - 'src/**'
      - 'Cargo.yml'
      - '.github/workflows/rust_create_release.yml'
  push:
    branches:
      - "prerelease"
    paths:
      - 'src/**'
      - 'Cargo.yml'
      - '.github/workflows/rust_create_release.yml'

#TODO: добавить отслеживание изменений по директориям
#Разобраться с версионированием при ПР
# Записать правила версионирования (ключевые слова в коммитах)
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-binary:
    environment: ${{ github.base_ref }}
    runs-on: ubuntu-20.04
    permissions: write-all

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install libssl-dev
        run: sudo apt-get install libssl-dev pkg-config -y

      - name: Application Version
        id: version
        uses: paulhatch/semantic-version@v5.0.2
        with:
          change_path: "src/ Cargo.toml"
          version_format: "${major}.${minor}.${patch}-prerelease${increment}"

      - name: Replace version in Cargo.toml
        run: sed -i s/"^version .*$"/"version = \"${{ steps.version.outputs.version }}\""/g Cargo.toml

      - name: Build
        env:
          RUSTFLAGS: "-C target-feature=-crt-static"
        run: cargo build --release

      - name: Create Release
        uses: marvinpinto/action-automatic-releases@latest
        id: create_release_prerelease
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: Release ${{ steps.version.outputs.version_tag }}
          draft: false
          prerelease: true
          automatic_release_tag: prerelease
        if: ${{ github.base_ref_name == 'prerelease' }}

      - name: Create Release
        uses: marvinpinto/action-automatic-releases@latest
        id: create_release_latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: Release ${{ steps.version.outputs.version_tag }}
          draft: false
          prerelease: true
          automatic_release_tag: latest
        if: ${{ github.base_ref_name == 'main' }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        id: upload_release_asset_prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_prerelease.outputs.upload_url }}
          asset_path: ./target/release/event-manager-telegram-bot
          asset_name: event-manager-telegram-bot
          asset_content_type: application/octet-stream
        if: ${{ github.base_ref_name == 'prerelease' }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        id: upload_release_asset_latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_latest.outputs.upload_url }}
          asset_path: ./target/release/event-manager-telegram-bot
          asset_name: event-manager-telegram-bot
          asset_content_type: application/octet-stream
        if: ${{ github.base_ref_name == 'main' }}
