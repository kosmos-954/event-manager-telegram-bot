name: Rust

on:
  push:
    branches:
      - "main"
      - "prerelease"
  pull_request:
    branches:
      - "main"
      - "prerelease"

#TODO: добавить отслеживание изменений по директориям
#Разобраться с версионированием при ПР
# Записать правила версионирования (ключевые слова в коммитах)
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    environment: ${{ github.base_ref }}
    runs-on: ubuntu-20.04
    permissions: write-all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app_src_path:
              - 'src/**'
              - 'Cargo.toml'
            app_cfg_path:
              - 'cfg/**'
            dockerfile_path:
              - 'Dockerfile'
            iaac_path:
              - 'iaac/**'
              - 'cfg/**'

      - name: Install libssl-dev
        run: sudo apt-get install libssl-dev pkg-config -y
        if: steps.filter.outputs.app_src_path == 'true'

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false

      - name: Replace version in Cargo.toml
        run: sed -i s/"^version .*$"/"version = \"${{ steps.tag_version.outputs.new_version }}\""/g Cargo.toml
        if: steps.filter.outputs.app_src_path == 'true'

      - name: Build
        env:
          RUSTFLAGS: "-C target-feature=-crt-static"
        run: cargo build --release
        if: steps.filter.outputs.app_src_path == 'true'

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          draft: false
          prerelease: false
        if: steps.filter.outputs.app_src_path == 'true'

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        id: upload_release_asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/event-manager-telegram-bot
          asset_name: event-manager-telegram-bot
          asset_content_type: application/octet-stream
        if: steps.filter.outputs.app_src_path == 'true'

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set outputs
        id: binary_version
        run: echo "binary_version_tag=${{ steps.tag_version.outputs.old_tag }}" >> $GITHUB_OUTPUT
        if: steps.filter.outputs.app_src_path == 'false'

      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            "REPOSITORY_ADDRESS=${{ github.server_url }}/${{ github.repository }}"
            "RELEASE_VERSION=${{ steps.binary_version.outputs.binary_version_tag }}"
        if: steps.filter.outputs.app_src_path == 'true' || steps.filter.outputs.dockerfile_path == 'true'

      - name: Install docker and docker-compose on target instance
        run: |
          ansible-galaxy install -r iaac/ansible/roles/requirements.yml
          eval "$(ssh-agent -s)"
          echo -n ${{ secrets.DEPLOY_SSH_KEY }} | base64 -d | ssh-add -
          ansible-playbook --user ${{ secrets.DEPLOY_SSH_USER }} -i iaac/ansible/inventory \
          iaac/ansible/playbooks/docker-compose.yml --extra-vars "\
          target_host=\"${{ secrets.DOCKER_HOST_ADDRESS }}\" \
          ansible_sudo_pass=\"${{ secrets.DEPLOY_USER_PASSWORD }}\" \
          docker_compose_install_fq_link=\"/usr/bin/docker-compose\" \
          docker_image_version=\"${{ steps.meta.outputs.version }}\" \
          TELEGRAM_BOT_TOKEN=\"${{ secrets.TELEGRAM_BOT_TOKEN }}\" \
          PAYMENT_PROVIDER_TOKEN=\"${{ secrets.PAYMENT_PROVIDER_TOKEN }}\"
          telegram_admin_ids_list=\"${{ vars.TELEGRAM_ADMIN_IDS_LIST }}\""
        if: steps.filter.outputs.app_src_path == 'true' || steps.filter.outputs.dockerfile_path == 'true' || steps.filter.outputs.iaac_path == 'true'
